{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","randomTanah","tRandom","Math","floor","random","state","active","setState","randomWaktu","max","min","round","showTikus","isEndGame","setTimeout","isStart","randomTime","a","mole0","prevState","mole1","mole2","mole3","mole4","mole5","handleStart","score","handlePukul","mole","isShowMole","this","className","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e10670b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      isShowMole: true,\n      active: null,\n      isStart: false,\n      isEndGame: true,\n      mole0: false,\n      mole1: false,\n      mole2: false,\n      mole3: false,\n      mole4: false,\n      mole5: false,\n      score: 0\n    }\n  }\n  \n  randomTanah = () => {\n    const tRandom = Math.floor(Math.random()*6);\n    if (this.state.active === tRandom) {\n      this.randomTanah()\n    }\n    else {\n      this.setState({active: tRandom})\n    }\n    return tRandom\n  }\n\n  randomWaktu = (max, min) => {\n    return Math.round(Math.random()*(max-min)+min)\n  }\n\n\n  showTikus = () => {\n    if (!this.state.isEndGame) {\n      const randomTime = this.randomWaktu(200, 400)\n      const setFalseRandomTime =  1000\n      setTimeout(() => {\n        let a = this.randomTanah()\n        this.setState({active: a})\n        if (a === 0) {\n          this.setState({mole0: true})\n          setTimeout(() => {this.setState({mole0: false})}, setFalseRandomTime)\n        }\n        if (a === 1) {\n          this.setState((prevState) => {\n            return {mole1: true,}\n          })\n          setTimeout(() => {this.setState({mole1: false})}, setFalseRandomTime)\n        }\n        if (a === 2) {\n          this.setState((prevState) => {\n            return {mole2: true,}\n          })\n          setTimeout(() => {this.setState({mole2: false})}, setFalseRandomTime)\n        }\n        if (a === 3) {\n          this.setState((prevState) => {\n            return {mole3: true,}\n          })\n          setTimeout(() => {this.setState({mole3: false})}, setFalseRandomTime)\n        }\n        if (a === 4) {\n          this.setState((prevState) => {\n            return {mole4: true,}\n          })\n          setTimeout(() => {this.setState({mole4: false})}, setFalseRandomTime)\n        }\n        if (a === 5) {\n          this.setState((prevState) => {\n            return {mole5: true,}\n          })\n          setTimeout(() => {this.setState({mole5: false})}, setFalseRandomTime)\n        }\n          this.showTikus()\n      }, randomTime)\n    }\n    else {\n      setTimeout(() => {\n        this.setState({isStart: false})\n      }, 1500);\n    }\n  }\n\n  handleStart = () => {\n     this.setState({isStart: true, isEndGame: false, score: 0}, () => {\n      this.showTikus()\n     })\n     setTimeout(() => {\n       this.setState({isEndGame: true})\n     }, 10000)\n  }\n\n   handlePukul = (mole) => {\n     if (this.state.mole0 && mole === \"mole0\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole0: false}})\n     }\n     else if (this.state.mole1 && mole === \"mole1\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole1: false}})\n     }\n     else if (this.state.mole2 && mole === \"mole2\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole2: false}})\n     }\n     else if (this.state.mole3 && mole === \"mole3\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole3: false}})\n     }\n     else if (this.state.mole4 && mole === \"mole4\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole4: false}})\n     }\n     else if (this.state.mole5 && mole === \"mole5\") {\n      this.setState((prevState) => {return {score: prevState.score+1, mole5: false}})\n     }\n   }\n\n\n   \n  render() {\n    const {isStart, mole0, mole1, mole2, mole3, mole4, mole5, score} = this.state\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div>\n            <h1>Whack A Mole !</h1>\n            <p className=\"inspired\">Inspired by Wesbos and Web Programming Unpas</p>\n          </div>\n          <div className=\"score\">\n            {score}\n          </div>\n        </div>\n\n          <button className={isStart? \"button-disabled\": \"button\"} onClick={this.handleStart}>\n            <span className=\"button-text\">\n              Start\n            </span>\n          </button>\n      \n   \n        <div className=\"item-container\"> \n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole0\")}>\n              <div className={mole0? \"tikus muncul\" :\"tikus\"}></div>            \n          </div>\n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole1\")}>\n              <div className={mole1? \"tikus muncul\" :\"tikus\"}></div>\n          </div>\n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole2\")}>\n              <div className={mole2? \"tikus muncul\" :\"tikus\"}></div>\n          </div>\n        </div>\n        <div className=\"item-container\"> \n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole3\")}>\n              <div className={mole3? \"tikus muncul\" :\"tikus\"}></div>\n          </div>\n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole4\")}>\n              <div className={mole4? \"tikus muncul\" :\"tikus\"}></div>\n          </div>\n          <div className=\"tanah\" onClick={() => this.handlePukul(\"mole5\")}>\n              <div className={mole5? \"tikus muncul\" :\"tikus\"}></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}